/*
 * QCRI, NADEEF LICENSE
 * NADEEF is an extensible, generalized and easy-to-deploy data cleaning platform built at QCRI.
 * NADEEF means "Clean" in Arabic
 *
 * Copyright (c) 2011-2013, Qatar Foundation for Education, Science and Community Development (on
 * behalf of Qatar Computing Research Institute) having its principle place of business in Doha,
 * Qatar with the registered address P.O box 5825 Doha, Qatar (hereinafter referred to as "QCRI")
 *
 * NADEEF has patent pending nevertheless the following is granted.
 * NADEEF is released under the terms of the MIT License, (http://opensource.org/licenses/MIT).
 */

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package qa.qcri.nadeef.lab.dedup;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;

public class TDedupService {

  public interface Iface {

    public List<List<Integer>> incrementalDedup(List<Integer> newItems) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void incrementalDedup(List<Integer> newItems, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.incrementalDedup_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<List<Integer>> incrementalDedup(List<Integer> newItems) throws org.apache.thrift.TException
    {
      send_incrementalDedup(newItems);
      return recv_incrementalDedup();
    }

    public void send_incrementalDedup(List<Integer> newItems) throws org.apache.thrift.TException
    {
      incrementalDedup_args args = new incrementalDedup_args();
      args.setNewItems(newItems);
      sendBase("incrementalDedup", args);
    }

    public List<List<Integer>> recv_incrementalDedup() throws org.apache.thrift.TException
    {
      incrementalDedup_result result = new incrementalDedup_result();
      receiveBase(result, "incrementalDedup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "incrementalDedup failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void incrementalDedup(List<Integer> newItems, org.apache.thrift.async.AsyncMethodCallback<incrementalDedup_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      incrementalDedup_call method_call = new incrementalDedup_call(newItems, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class incrementalDedup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> newItems;
      public incrementalDedup_call(List<Integer> newItems, org.apache.thrift.async.AsyncMethodCallback<incrementalDedup_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.newItems = newItems;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("incrementalDedup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        incrementalDedup_args args = new incrementalDedup_args();
        args.setNewItems(newItems);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<Integer>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_incrementalDedup();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("incrementalDedup", new incrementalDedup());
      return processMap;
    }

    public static class incrementalDedup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, incrementalDedup_args> {
      public incrementalDedup() {
        super("incrementalDedup");
      }

      public incrementalDedup_args getEmptyArgsInstance() {
        return new incrementalDedup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public incrementalDedup_result getResult(I iface, incrementalDedup_args args) throws org.apache.thrift.TException {
        incrementalDedup_result result = new incrementalDedup_result();
        result.success = iface.incrementalDedup(args.newItems);
        return result;
      }
    }

  }

  public static class incrementalDedup_args implements org.apache.thrift.TBase<incrementalDedup_args, incrementalDedup_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("incrementalDedup_args");

    private static final org.apache.thrift.protocol.TField NEW_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("newItems", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new incrementalDedup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new incrementalDedup_argsTupleSchemeFactory());
    }

    private List<Integer> newItems; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NEW_ITEMS((short)1, "newItems");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NEW_ITEMS
            return NEW_ITEMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NEW_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("newItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(incrementalDedup_args.class, metaDataMap);
    }

    public incrementalDedup_args() {
    }

    public incrementalDedup_args(
      List<Integer> newItems)
    {
      this();
      this.newItems = newItems;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public incrementalDedup_args(incrementalDedup_args other) {
      if (other.isSetNewItems()) {
        List<Integer> __this__newItems = new ArrayList<Integer>();
        for (Integer other_element : other.newItems) {
          __this__newItems.add(other_element);
        }
        this.newItems = __this__newItems;
      }
    }

    public incrementalDedup_args deepCopy() {
      return new incrementalDedup_args(this);
    }

    @Override
    public void clear() {
      this.newItems = null;
    }

    public int getNewItemsSize() {
      return (this.newItems == null) ? 0 : this.newItems.size();
    }

    public java.util.Iterator<Integer> getNewItemsIterator() {
      return (this.newItems == null) ? null : this.newItems.iterator();
    }

    public void addToNewItems(int elem) {
      if (this.newItems == null) {
        this.newItems = new ArrayList<Integer>();
      }
      this.newItems.add(elem);
    }

    public List<Integer> getNewItems() {
      return this.newItems;
    }

    public incrementalDedup_args setNewItems(List<Integer> newItems) {
      this.newItems = newItems;
      return this;
    }

    public void unsetNewItems() {
      this.newItems = null;
    }

    /** Returns true if field newItems is set (has been assigned a value) and false otherwise */
    public boolean isSetNewItems() {
      return this.newItems != null;
    }

    public void setNewItemsIsSet(boolean value) {
      if (!value) {
        this.newItems = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NEW_ITEMS:
        if (value == null) {
          unsetNewItems();
        } else {
          setNewItems((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NEW_ITEMS:
        return getNewItems();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NEW_ITEMS:
        return isSetNewItems();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof incrementalDedup_args)
        return this.equals((incrementalDedup_args)that);
      return false;
    }

    public boolean equals(incrementalDedup_args that) {
      if (that == null)
        return false;

      boolean this_present_newItems = true && this.isSetNewItems();
      boolean that_present_newItems = true && that.isSetNewItems();
      if (this_present_newItems || that_present_newItems) {
        if (!(this_present_newItems && that_present_newItems))
          return false;
        if (!this.newItems.equals(that.newItems))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(incrementalDedup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      incrementalDedup_args typedOther = (incrementalDedup_args)other;

      lastComparison = Boolean.valueOf(isSetNewItems()).compareTo(typedOther.isSetNewItems());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewItems()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newItems, typedOther.newItems);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("incrementalDedup_args(");
      boolean first = true;

      sb.append("newItems:");
      if (this.newItems == null) {
        sb.append("null");
      } else {
        sb.append(this.newItems);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class incrementalDedup_argsStandardSchemeFactory implements SchemeFactory {
      public incrementalDedup_argsStandardScheme getScheme() {
        return new incrementalDedup_argsStandardScheme();
      }
    }

    private static class incrementalDedup_argsStandardScheme extends StandardScheme<incrementalDedup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, incrementalDedup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NEW_ITEMS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.newItems = new ArrayList<Integer>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    int _elem2; // required
                    _elem2 = iprot.readI32();
                    struct.newItems.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setNewItemsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, incrementalDedup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.newItems != null) {
          oprot.writeFieldBegin(NEW_ITEMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.newItems.size()));
            for (int _iter3 : struct.newItems)
            {
              oprot.writeI32(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class incrementalDedup_argsTupleSchemeFactory implements SchemeFactory {
      public incrementalDedup_argsTupleScheme getScheme() {
        return new incrementalDedup_argsTupleScheme();
      }
    }

    private static class incrementalDedup_argsTupleScheme extends TupleScheme<incrementalDedup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, incrementalDedup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNewItems()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNewItems()) {
          {
            oprot.writeI32(struct.newItems.size());
            for (int _iter4 : struct.newItems)
            {
              oprot.writeI32(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, incrementalDedup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.newItems = new ArrayList<Integer>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              int _elem7; // required
              _elem7 = iprot.readI32();
              struct.newItems.add(_elem7);
            }
          }
          struct.setNewItemsIsSet(true);
        }
      }
    }

  }

  public static class incrementalDedup_result implements org.apache.thrift.TBase<incrementalDedup_result, incrementalDedup_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("incrementalDedup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new incrementalDedup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new incrementalDedup_resultTupleSchemeFactory());
    }

    private List<List<Integer>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(incrementalDedup_result.class, metaDataMap);
    }

    public incrementalDedup_result() {
    }

    public incrementalDedup_result(
      List<List<Integer>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public incrementalDedup_result(incrementalDedup_result other) {
      if (other.isSetSuccess()) {
        List<List<Integer>> __this__success = new ArrayList<List<Integer>>();
        for (List<Integer> other_element : other.success) {
          List<Integer> __this__success_copy = new ArrayList<Integer>();
          for (Integer other_element_element : other_element) {
            __this__success_copy.add(other_element_element);
          }
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
    }

    public incrementalDedup_result deepCopy() {
      return new incrementalDedup_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<Integer>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<Integer> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<Integer>>();
      }
      this.success.add(elem);
    }

    public List<List<Integer>> getSuccess() {
      return this.success;
    }

    public incrementalDedup_result setSuccess(List<List<Integer>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<Integer>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof incrementalDedup_result)
        return this.equals((incrementalDedup_result)that);
      return false;
    }

    public boolean equals(incrementalDedup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(incrementalDedup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      incrementalDedup_result typedOther = (incrementalDedup_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("incrementalDedup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class incrementalDedup_resultStandardSchemeFactory implements SchemeFactory {
      public incrementalDedup_resultStandardScheme getScheme() {
        return new incrementalDedup_resultStandardScheme();
      }
    }

    private static class incrementalDedup_resultStandardScheme extends StandardScheme<incrementalDedup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, incrementalDedup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<List<Integer>>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    List<Integer> _elem10; // required
                    {
                      org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                      _elem10 = new ArrayList<Integer>(_list11.size);
                      for (int _i12 = 0; _i12 < _list11.size; ++_i12)
                      {
                        int _elem13; // required
                        _elem13 = iprot.readI32();
                        _elem10.add(_elem13);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, incrementalDedup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (List<Integer> _iter14 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter14.size()));
                for (int _iter15 : _iter14)
                {
                  oprot.writeI32(_iter15);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class incrementalDedup_resultTupleSchemeFactory implements SchemeFactory {
      public incrementalDedup_resultTupleScheme getScheme() {
        return new incrementalDedup_resultTupleScheme();
      }
    }

    private static class incrementalDedup_resultTupleScheme extends TupleScheme<incrementalDedup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, incrementalDedup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (List<Integer> _iter16 : struct.success)
            {
              {
                oprot.writeI32(_iter16.size());
                for (int _iter17 : _iter16)
                {
                  oprot.writeI32(_iter17);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, incrementalDedup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new ArrayList<List<Integer>>(_list18.size);
            for (int _i19 = 0; _i19 < _list18.size; ++_i19)
            {
              List<Integer> _elem20; // required
              {
                org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                _elem20 = new ArrayList<Integer>(_list21.size);
                for (int _i22 = 0; _i22 < _list21.size; ++_i22)
                {
                  int _elem23; // required
                  _elem23 = iprot.readI32();
                  _elem20.add(_elem23);
                }
              }
              struct.success.add(_elem20);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
