addPredicate(template) ::= <<
predicates.add(Predicate.valueOf("$template$", tableName)); $\n$
>>

dcTemplate(DCName, template, tableName) ::= <<
/*
 * Code Generated by NADEEF.
 */
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import qa.qcri.nadeef.core.datamodel.Cell;
import qa.qcri.nadeef.core.datamodel.Fix;
import qa.qcri.nadeef.core.datamodel.PairTupleRule;
import qa.qcri.nadeef.core.datamodel.Predicate;
import qa.qcri.nadeef.core.datamodel.Tuple;
import qa.qcri.nadeef.core.datamodel.TuplePair;
import qa.qcri.nadeef.core.datamodel.Violation;

public class $DCName$ extends PairTupleRule{
    private List<Predicate> predicates;

    public $DCName$() {
        String tableName = "$tableName$";
        predicates = new ArrayList<>();
        $template:addPredicate()$
    }

    @Override
    public Collection<Violation> detect(TuplePair tuplePair) {
        List<Violation> result = new ArrayList<>();
        Set<Cell> infectedCells = new HashSet<>();
        boolean isValid = true;
        for (Predicate predicate : predicates) {
            if (!predicate.isValid(tuplePair.getLeft(), tuplePair.getRight())) {
                isValid = false;
                break;
            }

            Cell leftCell = tuplePair.getLeft().getCell(predicate.getLeft());
            infectedCells.add(leftCell);
            if (!predicate.isRightConstant()){
                Cell rightCell = tuplePair.getRight().getCell(predicate.getRight());
                infectedCells.add(rightCell);
            }
        }

        // all the predicates are valid, then the DC is violated
        if (isValid) {
            Violation violation = new Violation(getRuleName());
            for (Cell cell : infectedCells) {
                violation.addCell(cell);
            }
            //violation.addCell(cell);
            result.add(violation);
        }

        return result;
    }

    @Override
    public Collection<Fix> repair(Violation violation) {
        // TODO Auto-generated method stub
        return null;
    }
}
>>