addPredicate(template) ::= <<
predicates.add(Predicate.valueOf("$template$", tableName)); $\n$
>>

dcTemplate(DCName, template, tableName) ::= <<
/*
 * Code Generated by NADEEF.
 */
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import qa.qcri.nadeef.core.datamodel.Cell;
import qa.qcri.nadeef.core.datamodel.Fix;
import qa.qcri.nadeef.core.datamodel.Predicate;
import qa.qcri.nadeef.core.datamodel.SingleTupleRule;
import qa.qcri.nadeef.core.datamodel.Tuple;
import qa.qcri.nadeef.core.datamodel.Violation;

public class $DCName$ extends SingleTupleRule {
    private List<Predicate> predicates;

    public $DCName$() throws ParseException{
        String tableName = "$tableName$";
        predicates = new ArrayList<>();

        $template:addPredicate()$
    }

    @Override
    public Collection<Violation> detect(Tuple tuple) {
        boolean isValid = true;
        List<Violation> result = new ArrayList<Violation>();
        Set<Cell> infectedCells = new HashSet<Cell>();
        for (Predicate predicate : predicates) {
            if (!predicate.isValid(tuple)) {
                isValid = false;
                break;
            }

            Cell leftCell = tuple.getCell(predicate.getLeft());
            infectedCells.add(leftCell);
            if (!predicate.isRightConstant()){
                Cell rightCell = tuple.getCell(predicate.getRight());
                infectedCells.add(rightCell);
            }
        }

        // all the predicates are valid, then the DC is violated
        if (isValid) {
            Violation violation = new Violation(getRuleName());
            for (Cell cell : infectedCells){
                violation.addCell(cell);
            }

            //violation.addCell(cell);
            result.add(violation);
        }

        return result;
    }

    @Override
    public Collection<Fix> repair(Violation violation) {
        // TODO Auto-generated method stub
        return null;
    }
}
>>